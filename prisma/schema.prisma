// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Provider {
  local
  google
  facebook
  github
}

enum Status {
  pending
  processing
  delivered
  cancelled
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  name              String?
  password          String?
  email_verified_at DateTime?
  image             String?
  phone_number      String?
  provider          Provider  @default(local)
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  adresses         Address[]
  notifications    Notification[]
  admin            Admin?
  reviews          Review[]
  shopping_session ShoppingSession?
  wishlists        Wishlist[]
  orders           Order[]

  @@map("users")
}

model Address {
  id           Int      @id @default(autoincrement())
  user_id      String
  full_address String?
  coordinates  String?
  postal_code  String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  user  User    @relation(fields: [user_id], references: [id])
  Order Order[]

  @@map("addresses")
}

model Notification {
  id         Int      @id @default(autoincrement())
  message    String
  user_id    String?
  created_at DateTime @default(now())

  user User? @relation(fields: [user_id], references: [id])

  @@map("notifications")
}

model Admin {
  id      Int    @id @default(autoincrement())
  user_id String @unique

  user User @relation(fields: [user_id], references: [id])

  @@map("admins")
}

model Media {
  id   Int    @id @default(autoincrement())
  type String
  url  String

  payment_provider     PaymentProvider?
  review_medias        ReviewMedia[]
  product_medias       ProductMedia[]
  product_combinations ProductCombination[]

  @@map("medias")
}

model ReviewMedia {
  id        Int  @id @default(autoincrement())
  review_id Int
  media_id  Int?

  review Review @relation(fields: [review_id], references: [id])
  media  Media? @relation(fields: [media_id], references: [id])

  @@map("review_medias")
}

model ProductMedia {
  id         Int     @id @default(autoincrement())
  product_id String
  media_id   Int
  is_primary Boolean @default(false)

  product Product @relation(fields: [product_id], references: [id])
  media   Media   @relation(fields: [media_id], references: [id])

  @@map("product_medias")
}

model Product {
  id          String  @id @default(uuid())
  name        String
  rating      Float   @default(0)
  brand_id    Int?
  description String?
  slug        String?
  price       Float?
  total_sold  Int     @default(0)

  brand                Brand?               @relation(fields: [brand_id], references: [id])
  reviews              Review[]
  product_categories   ProductCategory[]
  wishlists            Wishlist[]
  cart_items           CartItem[]
  order_items          OrderItem[]
  product_medias       ProductMedia[]
  product_attributes   ProductAttribute[]
  product_combinations ProductCombination[]

  @@map("products")
}

model Brand {
  id   Int    @id @default(autoincrement())
  name String @unique

  products Product[]

  @@map("brands")
}

model ShoppingSession {
  id         Int      @id @default(autoincrement())
  user_id    String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user       User       @relation(fields: [user_id], references: [id])
  cart_items CartItem[]

  @@map("shopping_sessions")
}

model CartItem {
  id                     Int      @id @default(autoincrement())
  user_id                String
  quantity               Int
  product_id             String
  product_combination_id String
  shopping_sessions_id   Int
  created_at             DateTime @default(now())
  updated_at             DateTime @updatedAt

  product_combination ProductCombination? @relation(fields: [product_combination_id], references: [id])
  shopping_session    ShoppingSession?    @relation(fields: [shopping_sessions_id], references: [id])
  product             Product?            @relation(fields: [product_id], references: [id])

  @@map("carts")
}

model Order {
  id                  String   @id @default(uuid())
  user_id             String
  total_price         Float
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
  address_id          Int
  payment_type_id     Int
  payment_provider_id Int
  status              Status

  user             User             @relation(fields: [user_id], references: [id])
  address          Address          @relation(fields: [address_id], references: [id])
  payment_type     PaymentType      @relation(fields: [payment_type_id], references: [id])
  payment_provider PaymentProvider? @relation(fields: [payment_provider_id], references: [id])
  order_items      OrderItem[]

  @@map("orders")
}

model OrderItem {
  id                     Int      @id @default(autoincrement())
  order_id               String
  product_id             String
  quantity               Int      @default(1)
  product_combination_id String
  created_at             DateTime @default(now())
  updated_at             DateTime @updatedAt

  order               Order               @relation(fields: [order_id], references: [id])
  product             Product             @relation(fields: [product_id], references: [id])
  product_combination ProductCombination? @relation(fields: [product_combination_id], references: [id])

  @@map("order_items")
}

model PaymentType {
  id   Int    @id @default(autoincrement())
  name String

  orders Order[]

  @@map("payment_types")
}

model PaymentProvider {
  id       Int    @id @default(autoincrement())
  name     String
  media_id Int    @unique

  media  Media   @relation(fields: [media_id], references: [id])
  orders Order[]

  @@map("payment_providers")
}

model Review {
  id         Int      @id @default(autoincrement())
  user_id    String
  product_id String
  rating     Int
  comment    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user          User          @relation(fields: [user_id], references: [id])
  product       Product       @relation(fields: [product_id], references: [id])
  review_medias ReviewMedia[]

  @@map("reviews")
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique

  category_products ProductCategory[]

  @@map("categories")
}

model ProductCategory {
  id          Int    @id @default(autoincrement())
  category_id Int
  product_id  String

  category Category @relation(fields: [category_id], references: [id])
  product  Product  @relation(fields: [product_id], references: [id])

  @@map("product_categories")
}

model ProductAttribute {
  id         Int    @id @default(autoincrement())
  name       String
  product_id String

  product                  Product                 @relation(fields: [product_id], references: [id])
  product_attribute_values ProductAttributeValue[]

  @@map("product_attributes")
}

model ProductAttributeValue {
  id                   Int    @id @default(autoincrement())
  value                String
  product_attribute_id Int

  product_attribute ProductAttribute @relation(fields: [product_attribute_id], references: [id])

  @@map("product_attribute_values")
}

model ProductCombination {
  id          String  @id @default(uuid())
  sku         String?
  stock       Int     @default(0)
  price       Float?
  combination String
  key         String?
  image_id    Int?
  product_id  String

  order_items OrderItem[]
  cart_items  CartItem[]
  product     Product     @relation(fields: [product_id], references: [id])
  image       Media?      @relation(fields: [image_id], references: [id])

  @@map("product_attribute_combinations")
}

model Promo {
  id          String   @id @default(uuid())
  name        String
  description String
  code        String
  percentage  Int
  nominal     Float
  start_date  DateTime
  end_date    DateTime

  @@map("promos")
}

model Wishlist {
  id         Int      @id @default(autoincrement())
  user_id    String
  product_id String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user    User    @relation(fields: [user_id], references: [id])
  product Product @relation(fields: [product_id], references: [id])

  @@map("wishlists")
}
